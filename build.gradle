buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.kohsuke:github-api:1.114"
        classpath "gradle.plugin.com.modrinth.minotaur:Minotaur:1.1.0"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id "java-library"
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.5.0'
    id "signing"
    id "com.modrinth.minotaur" version "1.1.0"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'io.codearte.nexus-staging'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    accessWidener = file("src/main/resources/json-to-brigadier-minecraft.accesswidener")
}

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

ext.changelog = ""

tasks.withType(Sign) {
    onlyIf { project.hasProperty("sign") }
}

if (project.hasProperty("sign")) {
    signing {
        useGpgCmd()
        sign configurations.archives
    }
}

license {
    header = rootProject.file("LICENSE")
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    include(implementation("com.google.code.gson:gson:2.8.7"))
    include(modApi("com.oroarmor:json-to-brigadier:1.3.1"))

    modImplementation(fabricApi.module("fabric-command-api-v1", "${project.fabric_version}"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 16
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

javadoc {
    options {
        links ("https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.7",
                "https://docs.oracle.com/en/java/javase/16/docs/api/")
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'Json To Brigadier Minecraft'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Converts JSON into minecraft commands.'
                url = 'http://github.com/OroArmor/json-to-brigadier-minecraft'

                scm {
                    connection = 'scm:git:git://github.com/OroArmor/json-to-brigadier-minecraft.git'
                    developerConnection = 'scm:git:ssh://github.com:OroArmor/json-to-brigadier-minecraft.git'
                    url = 'http://github.com/OroArmor/json-to-brigadier-minecraft'
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://mit-license.org/'
                    }
                }

                developers {
                    developer {
                        id = 'OroArmor'
                        name = 'Eli Orona'
                        email = 'eliorona@live.com'
                        url = "oroarmor.com"
                    }
                }
            }
        }
    }

    repositories {
        def ossrhUsername = "OroArmor"
        def ossrhPassword = (project.hasProperty("ossrhPassword") ? project.property("ossrhPassword") : System.getenv("OSSRH_PASSWORD")) as String
        mavenLocal()
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials) {
                username = ossrhUsername
                password = ossrhPassword
            }
            name = "mavenCentral"
        }
    }
}

nexusStaging {
    username = "OroArmor"
    password = project.hasProperty("ossrhPassword") ? project.property("ossrhPassword") : System.getenv("OSSRH_PASSWORD")
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = project.curseforge_id
            releaseType = "release"
            project.curseforge_game_versions.split(",").each { String game_version -> addGameVersion game_version }
            addGameVersion "Fabric"

            changelogType = "html"
            changelog = project.ext.changelog
//			relations {
//				requiredDependency "fabric-api"
//			}
            mainArtifact(remapJar.archivePath) {
                displayName = "Json To Brigadier Minecraft - $rootProject.mod_version"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishToModrinth(type: TaskModrinthUpload) {
    token = System.getenv("MODRINTH_TOKEN") // Use an environment property!
    projectId = project.modrinth_id
    versionNumber = project.version
    uploadFile = remapJar.archivePath // This is the java jar task
    changelog = project.ext.changelog
    project.modrinth_game_versions.split(",").each { String game_version -> addGameVersion(game_version) }
    addLoader('fabric')
}

task github {
    onlyIf {
        System.getenv().GITHUB_TOKEN
    }

    doLast {
        def github = org.kohsuke.github.GitHub.connectUsingOAuth(System.getenv().GITHUB_TOKEN as String)
        def repository = github.getRepository("OroArmor/json-to-brigadier-minecraft")

        def releaseBuilder = new org.kohsuke.github.GHReleaseBuilder(repository, project.mod_version)
        releaseBuilder.name("$project.project_name $project.mod_version for $project.minecraft_version")
        releaseBuilder.body(project.ext.changelog)
        releaseBuilder.commitish("master")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.rootDir}/build/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
    }
}

task generateChangelog {
    def changelogFile = file("CHANGELOG.md")
    def contents = ""
    changelogFile.withReader { reader ->
        def line
        while ((line = reader.readLine()) != null)
            contents += line + "\n"
    }

    def changelogs = contents.split("----")
    project.ext.changelog = changelogs.find { log -> log.contains(project.version) }
    println project.ext.changelog
}